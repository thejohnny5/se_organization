version: '3.8'

services:
  se_org_frontend:
    build:
      context: ..
      dockerfile: container_definitions/Dockerfile.frontenddev
    container_name: frontend_dev
    image: se_org_dev_frontend
    ports:
      - "9002:8081"
    depends_on:
      - se_org_backend
      - testdb
    environment:
      - mode=dockerdev
    # Mount node modules and frontend ui
    volumes:
      - ${PWD}/ui:/app/ui
    networks:
      - se_org_network

  se_org_backend:
    build:
      context: ..
      dockerfile: container_definitions/Dockerfile.backenddev
    container_name: backend_dev
    image: se_org_dev_backend
    ports:
      - "8080:8080"
    depends_on:
      testdb:
        condition: service_healthy
    environment:
      - POSTGRES_HOST=testdb
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=test
      - DB_PORT=${DB_PORT}
      - mode=dockerdev
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
    volumes:
      - ${PWD}/pkg:/app/pkg
    networks:
      - se_org_network
  testdb:
    image: postgres:16-alpine
    container_name: testdb
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: test
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - db_test_data:/var/lib/postgresql/data
      - ${PWD}/db/init:/docker-entrypoint-initdb.d
    networks:
      - se_org_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - 9003:5432
volumes:
  db_test_data:

networks:
  se_org_network:
    driver: bridge
